- name: configureAdmin | Check if admin.password file exists {{ nexus_data_dir }}
  ansible.builtin.stat:
    path: "{{ nexus_data_dir }}/admin.password"
  register: admin_password_file

- name: configureAdmin | List results of admin file check
  ansible.builtin.debug:
    msg: >
      admin file found {{ admin_password_file.stat.exists }}
      data dir contents: {{ nexus_data_dir_contents.stdout }}

- name: configureAdmin | Set API URL
  ansible.builtin.set_fact:
    nexus_api_url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}{{ nexus_api_context_path }}"

- name: configureAdmin | Set current nexus admin for first-time installation
  ansible.builtin.set_fact:
    nexus_current_admin_user: 'admin'
  when:
    - admin_password_file.stat.exists

- name: configureAdmin | Re-Set current nexus admin if not a first time install
  ansible.builtin.set_fact:
    nexus_current_admin_user: "{{ nexus_admin_user }}"
  when: not admin_password_file.stat.exists

- name: configureAdmin | TEST password by accessing API using defined password for '{{ nexus_current_admin_user }}'
  ansible.builtin.uri:
    url: "{{ nexus_api_url }}{{ nexus_rest_api_script_endpoint }}"
    user: "{{ nexus_current_admin_user }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401, 404, -1
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_defined_password
  check_mode: no

- name: configureAdmin | Debug output of first TEST call
  ansible.builtin.debug:
    var: nexus_api_head_with_defined_password

- name: configureAdmin | Register defined admin password for next operations
  ansible.builtin.set_fact:
    nexus_current_admin_password: "{{ nexus_admin_password }}"
  when: nexus_api_head_with_defined_password.status != 401
  no_log: "{{ no_log_value | default('true') }}"

- name: configureAdmin | Get generated admin password from file (nexus >= 3.17)
  when:
    - admin_password_file.stat.exists
    - nexus_api_head_with_defined_password.status == 401
    - nexus_version is version_compare('3.17.0', '>=')
  block:
    - name: configureAdmin | Slurp content of remote generated password file
      ansible.builtin.slurp:
        src: "{{ nexus_data_dir }}/admin.password"
      register: _slurpedpass
      tags: always

    - name: configureAdmin | Set default password from slurped content
      ansible.builtin.set_fact:
        nexus_default_admin_password: "{{ _slurpedpass.content | b64decode }}"
      tags: always

- name: configureAdmin | TEST password by accessing API using default admin password
  ansible.builtin.uri:
    url: "{{ nexus_api_url }}{{ nexus_rest_api_script_endpoint }}"
    user: "{{ nexus_current_admin_user }}"
    password:  "{{ nexus_default_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401, 404
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_default_password
  when:
    - nexus_api_head_with_defined_password.status == 401
    - nexus_default_admin_password | length > 1

- name: configureAdmin | Debug output of second TEST call
  ansible.builtin.debug:
    var: nexus_api_head_with_default_password

- name: configureAdmin | Get Community Edition EULA Disclaimer Text
  ansible.builtin.uri:
    url: "{{ nexus_api_url }}{{ nexus_rest_api_baseurl }}/v1/system/eula"
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200
    validate_certs: "{{ nexus_api_validate_certs }}"
    timeout: 30
  register: eula_get_result
  retries: 3
  delay: 5
  until: eula_get_result is success
  ignore_errors: yes

- name: configureAdmin | Debug EULA GET result
  debug:
    var: eula_get_result
  when: eula_get_result is success

- name: configureAdmin | Accept Community Edition EULA
  ansible.builtin.uri:
    url: "{{ nexus_api_url }}{{ nexus_rest_api_baseurl }}/v1/system/eula"
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      disclaimer: "{{ eula_get_result.json.disclaimer | default('Use of Sonatype Nexus Repository - Community Edition is governed by the End User License Agreement at https://links.sonatype.com/products/nxrm/ce-eula.') }}"
      accepted: true
    status_code: 200, 204, 400
    validate_certs: "{{ nexus_api_validate_certs }}"
    timeout: 30
  register: eula_result
  retries: 3
  delay: 5
  until: eula_result is success or eula_result.status == 400
  ignore_errors: yes

- name: configureAdmin | Final TEST password by accessing API with project defined admin user ({{ nexus_admin_user }})
  ansible.builtin.uri:
    url: "{{ nexus_api_url }}{{ nexus_rest_api_script_endpoint }}"
    user: "{{ nexus_admin_user }}"
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401, 404,-1
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_new_admin
  when: not admin_password_file.stat.exists

- name: configureAdmin | Debug output of Final TEST call
  ansible.builtin.debug:
    var: nexus_api_head_with_new_admin

- name: configureAdmin | Re-Register default admin password for next operations
  ansible.builtin.set_fact:
    nexus_current_admin_password: "{{ nexus_default_admin_password }}"
  when: (nexus_api_head_with_default_password.status | default(false)) == 200

- name: configureAdmin | Update admin password if still using default
  ansible.builtin.include_tasks: admin_password_setup.yml
  when: (nexus_api_head_with_default_password.status | default(false)) == 200

- name: configureAdmin | Fail if current Nexus password is not known for {{ nexus_current_admin_user }}
  ansible.builtin.fail:
    msg: >-
      Failed to determine current Nexus password
      (it is neither the default/generated nor the defined password).
      If you are trying to change nexus_admin_password after first
      install, please set `-e nexus_default_admin_password=oldPassword`
      on the ansible-playbook command line.
      ansible-playbook -i environments/<group> your_playbook.yml -e nexus_default_admin_password=oldPassword
  when: nexus_current_admin_password is not defined

- name: configureAdmin | Create our Nexus Admin user
  ansible.builtin.include_tasks: create_admin_user.yml
  no_log: "{{ no_log_value | default('true') }}"

- name: configureAdmin | Set nexus_current_admin_user to our Nexus Admin
  ansible.builtin.set_fact:
    nexus_current_admin_user: "{{ nexus_admin_user }}"
  when: admin_created is defined and admin_created
  no_log: "{{ no_log_value | default('true') }}"

